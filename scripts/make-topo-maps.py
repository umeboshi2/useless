#!/usr/bin/env python
import os, sys
import time
import subprocess

from useless.base.path import path


# paths to applications
_appsdir = path('/mirrors/share/downloads/osm-composer-prereqs/apps')

srtm2osm = _appsdir / 'Srtm2Osm/Srtm2Osm.exe'
mkgmap_jar = _appsdir / 'mkgmap-r1795/mkgmap.jar'
splitter_jar = _appsdir / 'splitter-r161/splitter.jar'
osmosis =    _appsdir / 'osmosis/package/bin/osmosis'

# options, etc....
mkgmap_base_cmd = ['java', '-Xmx1024m', '-ea', '-jar', str(mkgmap_jar)]
splitter_base_cmd = ['java', '-Xmx1500m', '-jar', str(splitter_jar)]

srtm2osm_opts = ['-feet', '-step', '20', '-cat', '100', '20', '-large']
areas_filename = 'areas.list'
geonames_filename = '/mirrors/share/downloads/cities5000.zip'


# bounding box w95 n36 w85 n29
#Exact map coverage is (24.21457529067993,-106.65040254592896) to (39.39628601074219,-76.26706838607788)

#srtm2osm='../apps/Srtm2Osm/Srtm2Osm.exe -feet -step 20 -cat 100 20 -large'

#java -Xmx1024m -enableassertions -jar /mirrors/share/downloads/osm-composer-prereqs/apps/mkgmap-r1795/mkgmap.jar --mapname=19710021 --description=southern excerpt 19710021 --country-name=United States of America --country-abbr=USA --family-id=1971 --family-name=US South Excerpt Streets --max-jobs --route --verbose 19710021.osm.gz

#java -Xmx1500m -jar /mirrors/share/downloads/osm-composer-prereqs/apps/splitter-r161/splitter.jar --mapid=19710001 --description="Southern Excerpt OSM" --max-areas=175 --cache=cache --status-freq=15 --geonames-file=/mirrors/share/downloads/cities5000.zip --write-kml=areas.kml excerpt.osm.gz

#java -Xmx2024m -enableassertions -jar /mirrors/share/downloads/osm-composer-prereqs/apps/mkgmap-r1795/mkgmap.jar --draw-priority=10000 --transparent'


#gpsbabel -w -r -t -i garmin -f usb: -o gpx -F /freespace/home/umeboshi/garmin/garmin-data-2feb2011.gpx

#gpsbabel -w -r -t -i gpx -f /freespace/home/umeboshi/garmin/deltic_el_dorado_waypoints_1.gpx -o garmin,deficon=Park -F usb:
##f#############################


def translate_pbf_to_xml(pbf_filename):
    pass


def _gpsbabel_base(waypoints=True, tracks=True, routes=True):
    cmd = ['gpsbabel']
    if waypoints:
        cmd.append('-w')
    if routes:
        cmd.append('-r')
    if tracks:
        cmd.append('-t')
    return cmd


def get_from_garmin (filename, waypoints=True, tracks=True, routes=True):
    cmd = _gpsbabel_base(waypoints=waypoints, tracks=tracks,
                         routes=routes)
    cmd += ['-i', 'garmin', '-f', 'usb:', '-o', 'gpx', '-F', filename]
    subprocess.check_call(cmd)
    
def send_to_garmin(filename, waypoints=True, tracks=True, routes=True, deficon='Park'):
    cmd = _gpsbabel_base(waypoints=waypoints, tracks=tracks,
                         routes=routes)
    cmd += ['-i', 'gpx', '-f', filename, '-o', 'garmin,deficon=%s' % deficon,
            '-F', 'usb:']
    subprocess.check_call(cmd)
    

# this needs to be generated by splitter.jar
def parse_areas_file(filename):
    tiles = dict()
    current = None
    for line in file(filename):
        line = line.strip()
        if line:
            if not line.startswith('#'):
                if line[8] == ':':
                    tile = line.split(':')[0]
                    current = tile
            else:
                if len(line) > 8 and line[8] == ':':
                    #print "PARSE:", line
                    coords = line.split(': ')[1]
                    tl, br = coords.split(' to ')
                    tlx, tly = tl.split(',')
                    brx, bry = br.split(',')
                    #print '(%s,%s)->(%s,%s)' % (tlx, tly, brx, bry)
                    if current is not None:
                        if current in tiles:
                            raise RuntimeError , "%s already in tiles db" % current
                        tiles[current] = (tlx, tly, brx, bry)
    return tiles


def get_contours_for_tile(name, box):
    cmd = [str(srtm2osm)] + srtm2osm_opts + ['-bounds1'] + list(box)
    initial = name[0]
    number = int(initial)
    new_initial = str((number - 1) % 10)
    new_name = new_initial + name[1:]
    #print name, new_name, cmd
    cmd += ['-o', '%s.osm' % new_name]
    #print cmd
    retval = subprocess.call(cmd)
    if retval:
        raise RuntimeError , "%s returned %d" % (' '.join(cmd), retval)
    return new_name

def get_contours_for_box(top_lat, top_long, bottom_lat, bottom_long):
    cmd = [str(srtm2osm)] + srtm2osm_opts + ['-bounds1']
    cmd += map(str, [top_lat, top_long, bottom_lat, bottom_long])
    names = dict(top_lat=top_lat, top_long=top_long,
                 bottom_lat=bottom_lat, bottom_long=bottom_long)
    for lat in ['top_lat', 'bottom_lat']:
        if names[lat] < 0:
            names[lat] = '%dS' % abs(names[lat])
        else:
            names[lat] = '%dN' % names[lat]
    for longitude in ['top_long', 'bottom_long']:
        if names[longitude] < 0:
            names[longitude] = '%dW' % abs(names[longitude])
        else:
            names[longitude] = '%dE' % names[longitude]
    box_order = ['top_lat', 'top_long', 'bottom_lat', 'bottom_long']
    base_filename_top = '%(top_lat)sx%(top_long)s' % names
    base_filename_bottom = '%(bottom_lat)sx%(bottom_long)s' % names
    filename = '%s-%s.osm' % (base_filename_top, base_filename_bottom)
    cmd += ['-o', filename]
    print "Getting contours for %s" % filename
    subprocess.check_call(cmd)
    return filename

def get_contours_for_big_box(top_lat, top_long, bottom_lat, bottom_long, step=1):
    for longitude in range(top_long, bottom_long, step):
        for latitude in range(top_lat, bottom_lat, step):
            ltop_longitude = longitude
            ltop_latitude = latitude
            lbottom_longitude = longitude + step
            lbottom_latitude = latitude + step
            filename = get_contours_for_box(ltop_latitude, ltop_longitude,
                                            lbottom_latitude, lbottom_longitude)
            print "Compressing %s" % filename
            subprocess.check_call(['pigz', filename])
            

def join_contour_files(filenames, target):
    cmd = [str(osmosis)]
    for filename in filenames:
        cmd += ['--read-xml', filename]
    cmd += ['--write-xml', target]
    subprocess.check_call(cmd)
    

def mkgmap(something):
    pass


def main():
    tiles = parse_areas_file(areas_filename)
    contour_tile_map = dict()
    for tile in tiles:
        print "Getting contours for %s" % tile
        contour_name = get_contours_for_tile(tile, tiles[tile])
        filename = '%s.osm' % contour_name
        print "Compressing %s" % filename
        subprocess.check_call(['pigz', filename])
        contour_tile_map[contour_name] = tile
        
        

if __name__ == "__main__":
    print "hi there"
    
    
